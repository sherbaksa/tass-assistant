"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ —Å–ª–æ—è AI API
"""
from app.app import create_app
from app.services.ai_providers import AIProviderFactory, send_ai_request
from app.models import Provider, AIModel


def test_provider_factory():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É"""
    print("\n" + "=" * 60)
    print("–¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–±—Ä–∏–∫–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
    print("=" * 60)

    # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    available = AIProviderFactory.get_available_providers()
    print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: {', '.join(available)}")

    # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å —Ñ–µ–π–∫–æ–≤—ã–º –∫–ª—é—á–æ–º
    try:
        provider = AIProviderFactory.create_provider(
            provider_name='openai',
            api_key='test_key_12345',
            base_url=None
        )
        print(f"‚úÖ OpenAI –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å–æ–∑–¥–∞–Ω: {type(provider).__name__}")
        print(f"   Base URL: {provider.base_url}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {e}")


def test_db_providers():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –∏–∑ –ë–î"""
    print("\n" + "=" * 60)
    print("–¢–ï–°–¢ 2: –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 60)

    providers = Provider.query.all()

    if not providers:
        print("‚ö†Ô∏è  –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
        return

    for db_provider in providers:
        print(f"\nüì¶ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {db_provider.display_name}")
        print(f"   –ò–º—è: {db_provider.name}")
        print(f"   –ê–∫—Ç–∏–≤–µ–Ω: {'‚úÖ' if db_provider.is_active else '‚ùå'}")
        print(f"   API –∫–ª—é—á: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if db_provider.api_key else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")

        if db_provider.api_key:
            try:
                provider = AIProviderFactory.create_from_db_provider(db_provider)
                print(f"   –ö–ª–∞—Å—Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {type(provider).__name__}")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {e}")


def test_db_models():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π –∏–∑ –ë–î"""
    print("\n" + "=" * 60)
    print("–¢–ï–°–¢ 3: –ú–æ–¥–µ–ª–∏ AI –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 60)

    models = AIModel.query.join(Provider).filter(
        AIModel.is_active == True,
        Provider.is_active == True
    ).all()

    if not models:
        print("‚ö†Ô∏è  –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
        return

    for model in models:
        print(f"\nü§ñ –ú–æ–¥–µ–ª—å: {model.display_name}")
        print(f"   ID: {model.id}")
        print(f"   –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {model.provider.display_name}")
        print(f"   API –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: {model.api_identifier}")
        print(f"   –ê–∫—Ç–∏–≤–Ω–∞: {'‚úÖ' if model.is_active else '‚ùå'}")


def test_send_request():
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã API –∫–ª—é—á–∏)"""
    print("\n" + "=" * 60)
    print("–¢–ï–°–¢ 4: –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ AI (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–ª—é—á–∏)")
    print("=" * 60)

    # –ò—â–µ–º –ø–µ—Ä–≤—É—é –∞–∫—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º API –∫–ª—é—á–æ–º
    model = AIModel.query.join(Provider).filter(
        AIModel.is_active == True,
        Provider.is_active == True,
        Provider.api_key.isnot(None)
    ).first()

    if not model:
        print("‚ö†Ô∏è  –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º API –∫–ª—é—á–æ–º")
        print("   –ù–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á–∏ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: /assistants/providers")
        return

    print(f"\nüöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫: {model.display_name}")

    messages = [
        {"role": "user", "content": "–°–∫–∞–∂–∏ '–ø—Ä–∏–≤–µ—Ç' –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º"}
    ]

    try:
        result = send_ai_request(
            model_id=model.id,
            messages=messages,
            max_tokens=50,
            temperature=0.7
        )

        print(f"\n{'=' * 60}")
        if result["success"]:
            print("‚úÖ –ó–ê–ü–†–û–° –£–°–ü–ï–®–ï–ù!")
            print(f"   –ú–æ–¥–µ–ª—å: {result['model']}")
            print(f"   –û—Ç–≤–µ—Ç: {result['content']}")
            print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤: {result['usage']}")
            if result.get('fallback_used'):
                print(f"   ‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback. –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {result.get('original_error')}")
        else:
            print("‚ùå –ó–ê–ü–†–û–° –ù–ï–£–°–ü–ï–®–ï–ù")
            print(f"   –û—à–∏–±–∫–∞: {result['error']}")

    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    app = create_app()

    with app.app_context():
        print("\n" + "üî¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–ë–°–¢–†–ê–ö–¢–ù–û–ì–û –°–õ–û–Ø AI API ".center(60, "="))

        test_provider_factory()
        test_db_providers()
        test_db_models()
        test_send_request()

        print("\n" + "=" * 60)
        print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
        print("=" * 60 + "\n")