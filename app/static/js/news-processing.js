/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ –∫–æ–Ω–≤–µ–π–µ—Ä
 */
document.addEventListener('DOMContentLoaded', function() {
  const form = document.getElementById('newsProcessingForm');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  if (!form) return;

  const submitBtn = document.getElementById('submitBtn');
  const processingStatus = document.getElementById('processingStatus');
  const resultsContainer = document.getElementById('resultsContainer');
  const resultsContent = document.getElementById('resultsContent');
  const newsTextDiv = document.getElementById('newsText');

  // Placeholder –¥–ª—è contenteditable
  if (newsTextDiv) {
    newsTextDiv.addEventListener('focus', function() {
      if (this.textContent.trim() === '') {
        this.textContent = '';
      }
    });

    newsTextDiv.addEventListener('blur', function() {
      if (this.textContent.trim() === '') {
        this.classList.add('empty');
      } else {
        this.classList.remove('empty');
      }
    });
  }

  // –õ–æ–≥–∏–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —á–µ–∫–±–æ–∫—Å–æ–≤
  const freshnessCheckbox = document.querySelector('input[data-stage-name="freshness_check"]');
  const freshnessAnalysisCheckbox = document.querySelector('input[data-stage-name="freshness_analysis"]');
  const freshnessAnalysisLabel = document.querySelector('label[data-stage-name="freshness_analysis"]');

  if (freshnessCheckbox && freshnessAnalysisCheckbox) {
    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ–≥–æ —á–µ–∫–±–æ–∫—Å–∞
    function updateFreshnessAnalysisState() {
      if (!freshnessCheckbox.checked) {
        freshnessAnalysisCheckbox.checked = false;
        freshnessAnalysisCheckbox.disabled = true;
        if (freshnessAnalysisLabel) {
          freshnessAnalysisLabel.classList.add('disabled');
        }
      } else {
        freshnessAnalysisCheckbox.disabled = false;
        if (freshnessAnalysisLabel) {
          freshnessAnalysisLabel.classList.remove('disabled');
        }
      }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    updateFreshnessAnalysisState();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    freshnessCheckbox.addEventListener('change', updateFreshnessAnalysisState);
  }

  form.addEventListener('submit', async function(e) {
    e.preventDefault();

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ contenteditable
    const newsText = newsTextDiv.textContent.trim();
    const stageCheckboxes = document.querySelectorAll('input[name="stage_ids"]:checked:not([disabled])');
    const stageIds = Array.from(stageCheckboxes).map(cb => parseInt(cb.value));

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!newsText) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏');
      newsTextDiv.focus();
      return;
    }

    if (stageIds.length === 0) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç—Ç–∞–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏');
      return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    submitBtn.disabled = true;
    processingStatus.style.display = 'inline';
    resultsContainer.style.display = 'none';

    try {
      // –ü–æ–ª—É—á–∞–µ–º CSRF —Ç–æ–∫–µ–Ω
      const csrfToken = document.querySelector('input[name="csrf_token"]')?.value || '';

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
      const response = await fetch(form.dataset.actionUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRFToken': csrfToken
        },
        body: JSON.stringify({
          news_text: newsText,
          stage_ids: stageIds
        })
      });

      const data = await response.json();

      // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      displayResults(data);

    } catch (error) {
      resultsContent.innerHTML = `
        <div class="alert alert--error">
          –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: ${error.message}
        </div>
      `;
      resultsContainer.style.display = 'block';
    } finally {
      submitBtn.disabled = false;
      processingStatus.style.display = 'none';
    }
  });

  /**
   * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  function displayResults(data) {
    if (!data.success && data.error) {
      resultsContent.innerHTML = `
        <div class="alert alert--error">
          ${escapeHtml(data.error)}
        </div>
      `;
      resultsContainer.style.display = 'block';
      return;
    }

    if (!data.results || data.results.length === 0) {
      resultsContent.innerHTML = `
        <div class="alert alert--warning">
          –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        </div>
      `;
      resultsContainer.style.display = 'block';
      return;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º HTML —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    let html = '';
    data.results.forEach(result => {
      const isSuccess = result.success;
      const itemClass = isSuccess ? 'result-item--success' : 'result-item--error';

      html += `
        <div class="result-item ${itemClass}">
          <div class="result-header">
            <div class="result-title">${escapeHtml(result.stage_display_name)}</div>
            <span class="badge ${isSuccess ? 'badge--success' : 'badge--warning'}">
              ${isSuccess ? '‚úì –£—Å–ø–µ—à–Ω–æ' : '‚úó –û—à–∏–±–∫–∞'}
            </span>
          </div>
      `;

      if (isSuccess) {
        // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –∏ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å
        const formattedContent = formatStageContent(result.stage_name, result.content);

        html += `
          <div class="result-content">${formattedContent}</div>
          <div class="result-meta">
            –ú–æ–¥–µ–ª—å: ${escapeHtml(result.model_used || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
            ${result.fallback_used ? ' <span style="color: var(--warn);">(–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)</span>' : ''}
          </div>
        `;
      } else {
        html += `
          <div class="result-error">${escapeHtml(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}</div>
        `;
      }

      html += `</div>`;
    });

    resultsContent.innerHTML = html;
    resultsContainer.style.display = 'block';

    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
    resultsContainer.scrollIntoView({ behavior: 'smooth', block: 'start' });
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —ç—Ç–∞–ø–∞
   */
  function formatStageContent(stageName, content) {
    // –£–±–∏—Ä–∞–µ–º markdown –±–ª–æ–∫–∏ –∫–æ–¥–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
    content = content.trim();
    if (content.startsWith('```json') || content.startsWith('```')) {
      content = content.replace(/^```json?\s*/i, '').replace(/```\s*$/, '').trim();
    }

    // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
    let jsonData;
    try {
      jsonData = JSON.parse(content);
    } catch (e) {
      // –ï—Å–ª–∏ –Ω–µ JSON, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
      return `<div class="formatted-result">${escapeHtml(content)}</div>`;
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç—Ç–∞–ø–∞
    switch (stageName) {
      case 'classification':
        return formatClassification(jsonData);
      case 'freshness_check':
        return formatFreshnessCheck(jsonData);
      case 'freshness_analysis':
        return formatFreshnessAnalysis(jsonData);
      case 'analysis':
        return formatAnalysis(jsonData);
      case 'recommendations':
        return formatRecommendations(jsonData);
      default:
        // –ö—Ä–∞—Å–∏–≤—ã–π JSON fallback
        return `<div class="formatted-result"><pre>${escapeHtml(JSON.stringify(jsonData, null, 2))}</pre></div>`;
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  function formatClassification(data) {
    if (!data.codes || !Array.isArray(data.codes)) {
      return '<div class="empty-section">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏</div>';
    }

    let html = '<div class="formatted-result">';
    html += '<div class="category-list">';

    data.codes.forEach(item => {
      html += `
        <div class="category-item">
          <div class="category-header">
            <span class="category-code">${escapeHtml(item.code)}</span>
            <span class="confidence-badge">
              üìä ${item.confidence}%
            </span>
          </div>
          <div class="category-reasoning">${escapeHtml(item.reasoning)}</div>
        </div>
      `;
    });

    html += '</div></div>';
    return html;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Å–≤–µ–∂–µ—Å—Ç—å
   */
  function formatFreshnessCheck(data) {
    let html = '<div class="formatted-result">';

    if (data.search_query) {
      html += `<p><strong>–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:</strong> ${escapeHtml(data.search_query)}</p>`;
    }

    if (data.results && Array.isArray(data.results)) {
      html += `<h3>–ù–∞–π–¥–µ–Ω–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π: ${data.results.length}</h3>`;
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    }

    html += '</div>';
    return html;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Å–≤–µ–∂–µ—Å—Ç–∏
   */
  function formatFreshnessAnalysis(data) {
    let html = '<div class="formatted-result">';

    if (data.verdict) {
      html += `
        <div class="overall-verdict">
          <span class="verdict-label">–í–µ—Ä–¥–∏–∫—Ç:</span>
          <span class="verdict-value">${escapeHtml(data.verdict)}</span>
        </div>
      `;
    }

    if (data.reasoning) {
      html += `<p>${escapeHtml(data.reasoning)}</p>`;
    }

    html += '</div>';
    return html;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–∏
   */
/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–∏
 */
/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–∏
 */
function formatAnalysis(data) {
  // –û–¢–õ–ê–î–ö–ê: –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å —á—Ç–æ –ø—Ä–∏—à–ª–æ
  console.log('=== –ê–ù–ê–õ–ò–ó: –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ ===');
  console.log(data);
  console.log('=== –ö–æ–Ω–µ—Ü –¥–∞–Ω–Ω—ã—Ö ===');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç (—Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏)
  if (data.factual_analysis || data.structural_analysis || data.linguistic_analysis) {
    return formatDetailedAnalysis(data);
  }

  // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  if (data.news_analysis) {
    return formatLegacyAnalysis(data.news_analysis);
  }

  // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—ã—Ä–æ–π JSON –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  return `
    <div class="formatted-result">
      <div class="alert alert--warning">
        <strong>‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö</strong>
        <p>–ü–æ–∫–∞–∑—ã–≤–∞—é —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:</p>
      </div>
      <pre style="background: rgba(0,0,0,0.3); padding: 12px; border-radius: 8px; overflow-x: auto; font-size: 12px;">${escapeHtml(JSON.stringify(data, null, 2))}</pre>
    </div>
  `;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –¢–ê–°–°)
 */
function formatDetailedAnalysis(data) {
  let html = '<div class="formatted-result">';

  // –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
  if (data.overall_assessment) {
    const assessment = data.overall_assessment;
    const isReady = assessment.publication_ready;

    html += '<div class="overall-verdict">';
    html += `<span class="verdict-label">–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</span>`;
    html += `<span class="verdict-value" style="color: ${isReady ? 'var(--ok)' : 'var(--err)'}">`;
    html += isReady ? '‚úÖ –ì–æ—Ç–æ–≤' : '‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏';
    html += '</span></div>';

    if (assessment.summary) {
      html += `<p><strong>–†–µ–∑—é–º–µ:</strong> ${escapeHtml(assessment.summary)}</p>`;
    }
  }

  // –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
  if (data.factual_analysis) {
    html += '<h3>üìã –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑</h3>';
    html += '<div class="issue-list">';
    html += formatCheckSection('–°–ª–∞–≥–ª–∞–π–Ω', data.factual_analysis.slugline_check);
    html += formatCheckSection('–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', data.factual_analysis.dateline_check);
    html += formatCheckSection('–¶–∏—Ç–∞—Ç—ã', data.factual_analysis.quotes_check);
    html += formatCheckSection('–ë—ç–∫–≥—Ä–∞—É–Ω–¥', data.factual_analysis.background_check);
    html += '</div>';
  }

  // –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑
  if (data.structural_analysis) {
    html += '<h3>üèóÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑</h3>';
    html += '<div class="issue-list">';
    html += formatCheckSection('–ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è –ø–∏—Ä–∞–º–∏–¥–∞', data.structural_analysis.inverted_pyramid);
    html += formatCheckSection('–ó–∞–≥–æ–ª–æ–≤–æ–∫', data.structural_analysis.headline_check);
    html += formatCheckSection('–õ–∏–¥', data.structural_analysis.lead_check);
    html += formatCheckSection('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–±–∑–∞—Ü–µ–≤', data.structural_analysis.paragraph_flow);
    html += '</div>';
  }

  // –õ–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
  if (data.linguistic_analysis) {
    html += '<h3>‚úèÔ∏è –õ–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑</h3>';
    html += '<div class="issue-list">';
    html += formatCheckSection('–ì—Ä–∞–º–º–∞—Ç–∏–∫–∞', data.linguistic_analysis.grammar);
    html += formatCheckSection('–Ø—Å–Ω–æ—Å—Ç—å –∏–∑–ª–æ–∂–µ–Ω–∏—è', data.linguistic_analysis.clarity);
    html += '</div>';
  }

  // –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏ –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  if (data.tone_and_objectivity) {
    html += '<h3>üé≠ –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏ –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</h3>';
    html += '<div class="issue-list">';
    html += formatCheckSection('–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ—Å—Ç—å', data.tone_and_objectivity.neutrality);
    html += formatCheckSection('–ê—Ç—Ä–∏–±—É—Ü–∏—è', data.tone_and_objectivity.attribution);
    html += '</div>';
  }

  // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–º–µ—á–∞–Ω–∏—è
  if (data.overall_assessment && data.overall_assessment.critical_issues &&
      data.overall_assessment.critical_issues.length > 0) {
    html += '<h3>‚ùó –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–º–µ—á–∞–Ω–∏—è</h3>';
    html += '<div class="issue-list">';
    data.overall_assessment.critical_issues.forEach(issue => {
      html += `
        <div class="issue-item issue-item--high">
          <div class="issue-description">${escapeHtml(issue)}</div>
        </div>
      `;
    });
    html += '</div>';
  }

  // –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è
  if (data.overall_assessment && data.overall_assessment.minor_issues &&
      data.overall_assessment.minor_issues.length > 0) {
    html += '<h3>‚ÑπÔ∏è –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è</h3>';
    html += '<div class="issue-list">';
    data.overall_assessment.minor_issues.forEach(issue => {
      html += `
        <div class="issue-item issue-item--low">
          <div class="issue-description">${escapeHtml(issue)}</div>
        </div>
      `;
    });
    html += '</div>';
  }

  html += '</div>';
  return html;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (pass/fail/partial)
 */
function formatCheckSection(title, check) {
  if (!check) return '';

  const status = check.status || 'not_applicable';
  const statusMap = {
    'pass': { label: '‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç', class: 'low' },
    'fail': { label: '‚ùå –ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç', class: 'high' },
    'partial': { label: '‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ', class: 'medium' },
    'not_applicable': { label: '‚ûñ –ù–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ', class: 'low' }
  };

  const statusInfo = statusMap[status] || statusMap['not_applicable'];

  let html = `<div class="issue-item issue-item--${statusInfo.class}">`;
  html += '<div class="issue-header">';
  html += `<span class="issue-type">${escapeHtml(title)}</span>`;
  html += `<span class="severity-badge severity-badge--${statusInfo.class}">${statusInfo.label}</span>`;
  html += '</div>';

  if (check.details) {
    html += `<div class="issue-description">${escapeHtml(check.details)}</div>`;
  }

  html += '</div>';
  return html;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
 */
function formatLegacyAnalysis(analysis) {
  let html = '<div class="formatted-result">';

  // –û–±—â–∏–π –≤–µ—Ä–¥–∏–∫—Ç –∏ –æ—Ü–µ–Ω–∫–∞
  if (analysis.overall_verdict || analysis.summary_score) {
    html += '<div class="overall-verdict">';
    if (analysis.overall_verdict) {
      html += `<span class="verdict-label">–í–µ—Ä–¥–∏–∫—Ç:</span>`;
      html += `<span class="verdict-value">${escapeHtml(analysis.overall_verdict)}</span>`;
    }
    if (analysis.summary_score) {
      html += `<span class="score-badge">${escapeHtml(analysis.summary_score)}</span>`;
    }
    html += '</div>';
  }

  const details = analysis.detailed_analysis;
  if (details) {
    // –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
    if (details.factual_errors && details.factual_errors.length > 0) {
      html += '<h3>‚ö†Ô∏è –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏</h3>';
      html += '<div class="issue-list">';
      details.factual_errors.forEach(issue => {
        html += formatIssue(issue);
      });
      html += '</div>';
    } else {
      html += '<h3>‚úÖ –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏</h3>';
      html += '<div class="empty-section">–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ</div>';
    }

    // –°—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–º–µ—á–∞–Ω–∏—è
    if (details.stylistic_issues && details.stylistic_issues.length > 0) {
      html += '<h3>üìù –°—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–º–µ—á–∞–Ω–∏—è</h3>';
      html += '<div class="issue-list">';
      details.stylistic_issues.forEach(issue => {
        html += formatIssue(issue);
      });
      html += '</div>';
    } else {
      html += '<h3>‚úÖ –°—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–º–µ—á–∞–Ω–∏—è</h3>';
      html += '<div class="empty-section">–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ</div>';
    }

    // –õ–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
    if (details.linguistic_errors && details.linguistic_errors.length > 0) {
      html += '<h3>‚úèÔ∏è –õ–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏</h3>';
      html += '<div class="issue-list">';
      details.linguistic_errors.forEach(issue => {
        html += formatIssue(issue);
      });
      html += '</div>';
    } else {
      html += '<h3>‚úÖ –õ–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏</h3>';
      html += '<div class="empty-section">–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ</div>';
    }

    // –û—Ü–µ–Ω–∫–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    if (details.tonality_assessment) {
      html += '<h3>üé≠ –û—Ü–µ–Ω–∫–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏</h3>';
      html += formatTonality(details.tonality_assessment);
    }
  }

  // –û–±—â–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
  if (analysis.general_comments) {
    html += '<div class="general-comments">';
    html += `<strong>üí¨ –û–±—â–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:</strong><br>${escapeHtml(analysis.general_comments)}`;
    html += '</div>';
  }

  html += '</div>';
  return html;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
 */
function formatRecommendations(data) {
  let html = '<div class="formatted-result">';

  if (data.recommendations && Array.isArray(data.recommendations)) {
    html += '<div class="issue-list">';
    data.recommendations.forEach((rec, idx) => {
      html += `
        <div class="issue-item">
          <div class="issue-header">
            <span class="issue-type">${idx + 1}. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è</span>
          </div>
          <div class="issue-description">${escapeHtml(rec)}</div>
        </div>
      `;
    });
    html += '</div>';
  } else if (typeof data === 'string') {
    html += `<p>${escapeHtml(data)}</p>`;
  } else {
    html += '<div class="empty-section">–ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π</div>';
  }

  html += '</div>';
  return html;
}
  function formatRecommendations(data) {
    let html = '<div class="formatted-result">';

    if (data.recommendations && Array.isArray(data.recommendations)) {
      html += '<div class="issue-list">';
      data.recommendations.forEach((rec, idx) => {
        html += `
          <div class="issue-item">
            <div class="issue-header">
              <span class="issue-type">${idx + 1}. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è</span>
            </div>
            <div class="issue-description">${escapeHtml(rec)}</div>
          </div>
        `;
      });
      html += '</div>';
    } else if (typeof data === 'string') {
      html += `<p>${escapeHtml(data)}</p>`;
    } else {
      html += '<div class="empty-section">–ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π</div>';
    }

    html += '</div>';
    return html;
  }

  /**
   * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
   */
  function escapeHtml(text) {
    if (text === null || text === undefined) return '';
    const map = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#039;'
    };
    return String(text).replace(/[&<>"']/g, m => map[m]);
  }
});